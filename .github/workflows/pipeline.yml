name: Workflow


on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  # sonar:
  #   name: Build and analyze
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install Dependencies
  #       run: yarn install --frozen-lockfile

  #     # - name: Test and coverage
  #     #   run: yarn test:cov

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    # needs: sonar
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ecr-user
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile ecr-user
          aws configure set region us-east-1 --profile ecr-user
          aws ecr get-login-password --region us-east-1 --profile ecr-user | docker login --username AWS --password-stdin 851725563168.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker Image
        id: build-image
        run: |
          docker build -t 851725563168.dkr.ecr.us-east-1.amazonaws.com/message-service:latest -f Dockerfile .
          docker tag 851725563168.dkr.ecr.us-east-1.amazonaws.com/message-service:latest 851725563168.dkr.ecr.us-east-1.amazonaws.com/message-service:latest

      - name: Push Docker Image to ECR
        run: |
          docker push 851725563168.dkr.ecr.us-east-1.amazonaws.com/message-service:latest
        
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up environment variables
        run: echo "RESEND_KEY=${{ secrets.RESEND_KEY }}" >> $GITHUB_ENV && echo "EMAIL_DEFAULT=${{ secrets.EMAIL_DEFAULT }}" >> $GITHUB_ENV && echo "AMQP_URL=${{ secrets.AMQP_URL }}" >> $GITHUB_ENV

      - name: Generate Secret.yaml
        run: |
          echo "apiVersion: v1" > pipeline/Secret.yaml
          echo "kind: Secret" >> pipeline/Secret.yaml
          echo "metadata:" >> pipeline/Secret.yaml
          echo "  name: tech-challenge-message-secret" >> pipeline/Secret.yaml
          echo "type: Opaque" >> pipeline/Secret.yaml
          echo "data:" >> pipeline/Secret.yaml
          echo "  RESEND_KEY: $RESEND_KEY" >> pipeline/Secret.yaml
          echo "  EMAIL_DEFAULT: $EMAIL_DEFAULT" >> pipeline/Secret.yaml
          echo "  AMQP_URL: $AMQP_URL" >> pipeline/Secret.yaml

      - name: Configure AWS Credentials
        run: aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_DEFAULT_REGION: us-east-1

      - name: Set up kubectl
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: kubectl apply -f pipeline/application